//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GameClient.Server {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerStats", Namespace="http://schemas.datacontract.org/2004/07/Gameserver.Data.Models")]
    [System.SerializableAttribute()]
    public partial class PlayerStats : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GameClient.Server.TicTacToeResults[] gameHistoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int totalGamesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int totalLossesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int totalWinsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float winLossRationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GameClient.Server.TicTacToeResults[] gameHistory {
            get {
                return this.gameHistoryField;
            }
            set {
                if ((object.ReferenceEquals(this.gameHistoryField, value) != true)) {
                    this.gameHistoryField = value;
                    this.RaisePropertyChanged("gameHistory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerId {
            get {
                return this.playerIdField;
            }
            set {
                if ((this.playerIdField.Equals(value) != true)) {
                    this.playerIdField = value;
                    this.RaisePropertyChanged("playerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int totalGames {
            get {
                return this.totalGamesField;
            }
            set {
                if ((this.totalGamesField.Equals(value) != true)) {
                    this.totalGamesField = value;
                    this.RaisePropertyChanged("totalGames");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int totalLosses {
            get {
                return this.totalLossesField;
            }
            set {
                if ((this.totalLossesField.Equals(value) != true)) {
                    this.totalLossesField = value;
                    this.RaisePropertyChanged("totalLosses");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int totalWins {
            get {
                return this.totalWinsField;
            }
            set {
                if ((this.totalWinsField.Equals(value) != true)) {
                    this.totalWinsField = value;
                    this.RaisePropertyChanged("totalWins");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float winLossRation {
            get {
                return this.winLossRationField;
            }
            set {
                if ((this.winLossRationField.Equals(value) != true)) {
                    this.winLossRationField = value;
                    this.RaisePropertyChanged("winLossRation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TicTacToeResults", Namespace="http://schemas.datacontract.org/2004/07/Gameserver.Data.Models")]
    [System.SerializableAttribute()]
    public partial class TicTacToeResults : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid gameIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid loserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid player1IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid player2IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GameClient.Server.GameType typeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid winnerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid gameId {
            get {
                return this.gameIdField;
            }
            set {
                if ((this.gameIdField.Equals(value) != true)) {
                    this.gameIdField = value;
                    this.RaisePropertyChanged("gameId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid loserId {
            get {
                return this.loserIdField;
            }
            set {
                if ((this.loserIdField.Equals(value) != true)) {
                    this.loserIdField = value;
                    this.RaisePropertyChanged("loserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid player1Id {
            get {
                return this.player1IdField;
            }
            set {
                if ((this.player1IdField.Equals(value) != true)) {
                    this.player1IdField = value;
                    this.RaisePropertyChanged("player1Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid player2Id {
            get {
                return this.player2IdField;
            }
            set {
                if ((this.player2IdField.Equals(value) != true)) {
                    this.player2IdField = value;
                    this.RaisePropertyChanged("player2Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GameClient.Server.GameType type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid winnerId {
            get {
                return this.winnerIdField;
            }
            set {
                if ((this.winnerIdField.Equals(value) != true)) {
                    this.winnerIdField = value;
                    this.RaisePropertyChanged("winnerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameType", Namespace="http://schemas.datacontract.org/2004/07/Gameserver.Data.Models")]
    public enum GameType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TicTacToe = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameDetails", Namespace="http://schemas.datacontract.org/2004/07/Gameserver.Data.Models")]
    [System.SerializableAttribute()]
    public partial class GameDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int playerMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int playerMinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerMax {
            get {
                return this.playerMaxField;
            }
            set {
                if ((this.playerMaxField.Equals(value) != true)) {
                    this.playerMaxField = value;
                    this.RaisePropertyChanged("playerMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerMin {
            get {
                return this.playerMinField;
            }
            set {
                if ((this.playerMinField.Equals(value) != true)) {
                    this.playerMinField = value;
                    this.RaisePropertyChanged("playerMin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerProfile", Namespace="http://schemas.datacontract.org/2004/07/Gameserver.Data.Models")]
    [System.SerializableAttribute()]
    public partial class PlayerProfile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TicTacToeState", Namespace="http://schemas.datacontract.org/2004/07/Gameserver.Data.Models")]
    [System.SerializableAttribute()]
    public partial class TicTacToeState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GameClient.Server.PlayerMark[] boardField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GameClient.Server.PlayerMark[] board {
            get {
                return this.boardField;
            }
            set {
                if ((object.ReferenceEquals(this.boardField, value) != true)) {
                    this.boardField = value;
                    this.RaisePropertyChanged("board");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerMark", Namespace="http://schemas.datacontract.org/2004/07/GameServer.Data.Models.TicTacToe")]
    public enum PlayerMark : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Empty = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        X = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        O = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TicTacToeMove", Namespace="http://schemas.datacontract.org/2004/07/Gameserver.Data.Models")]
    [System.SerializableAttribute()]
    public partial class TicTacToeMove : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid gameIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GameClient.Server.PlayerMark markField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private GameClient.Server.MovePosition movePositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid playerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid gameId {
            get {
                return this.gameIdField;
            }
            set {
                if ((this.gameIdField.Equals(value) != true)) {
                    this.gameIdField = value;
                    this.RaisePropertyChanged("gameId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GameClient.Server.PlayerMark mark {
            get {
                return this.markField;
            }
            set {
                if ((this.markField.Equals(value) != true)) {
                    this.markField = value;
                    this.RaisePropertyChanged("mark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public GameClient.Server.MovePosition movePosition {
            get {
                return this.movePositionField;
            }
            set {
                if ((this.movePositionField.Equals(value) != true)) {
                    this.movePositionField = value;
                    this.RaisePropertyChanged("movePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid playerId {
            get {
                return this.playerIdField;
            }
            set {
                if ((this.playerIdField.Equals(value) != true)) {
                    this.playerIdField = value;
                    this.RaisePropertyChanged("playerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MovePosition", Namespace="http://schemas.datacontract.org/2004/07/GameServer.Data.Models.TicTacToe")]
    public enum MovePosition : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TopLeft = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TopCenter = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TopRight = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MiddleLeft = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MiddleCenter = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MiddleRight = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BottomLeft = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BottomCenter = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BottomRight = 8,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IInformationService")]
    public interface IInformationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/GetPlayerStats", ReplyAction="http://tempuri.org/IInformationService/GetPlayerStatsResponse")]
        GameClient.Server.PlayerStats GetPlayerStats(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/GetPlayerStats", ReplyAction="http://tempuri.org/IInformationService/GetPlayerStatsResponse")]
        System.Threading.Tasks.Task<GameClient.Server.PlayerStats> GetPlayerStatsAsync(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/GetGameList", ReplyAction="http://tempuri.org/IInformationService/GetGameListResponse")]
        GameClient.Server.GameDetails[] GetGameList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/GetGameList", ReplyAction="http://tempuri.org/IInformationService/GetGameListResponse")]
        System.Threading.Tasks.Task<GameClient.Server.GameDetails[]> GetGameListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/LoginPlayer", ReplyAction="http://tempuri.org/IInformationService/LoginPlayerResponse")]
        GameClient.Server.PlayerProfile LoginPlayer(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/LoginPlayer", ReplyAction="http://tempuri.org/IInformationService/LoginPlayerResponse")]
        System.Threading.Tasks.Task<GameClient.Server.PlayerProfile> LoginPlayerAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/LoginGuest", ReplyAction="http://tempuri.org/IInformationService/LoginGuestResponse")]
        bool LoginGuest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/LoginGuest", ReplyAction="http://tempuri.org/IInformationService/LoginGuestResponse")]
        System.Threading.Tasks.Task<bool> LoginGuestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/LogoutPlayer", ReplyAction="http://tempuri.org/IInformationService/LogoutPlayerResponse")]
        void LogoutPlayer(System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInformationService/LogoutPlayer", ReplyAction="http://tempuri.org/IInformationService/LogoutPlayerResponse")]
        System.Threading.Tasks.Task LogoutPlayerAsync(System.Guid playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInformationServiceChannel : GameClient.Server.IInformationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InformationServiceClient : System.ServiceModel.ClientBase<GameClient.Server.IInformationService>, GameClient.Server.IInformationService {
        
        public InformationServiceClient() {
        }
        
        public InformationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InformationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InformationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InformationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GameClient.Server.PlayerStats GetPlayerStats(System.Guid playerId) {
            return base.Channel.GetPlayerStats(playerId);
        }
        
        public System.Threading.Tasks.Task<GameClient.Server.PlayerStats> GetPlayerStatsAsync(System.Guid playerId) {
            return base.Channel.GetPlayerStatsAsync(playerId);
        }
        
        public GameClient.Server.GameDetails[] GetGameList() {
            return base.Channel.GetGameList();
        }
        
        public System.Threading.Tasks.Task<GameClient.Server.GameDetails[]> GetGameListAsync() {
            return base.Channel.GetGameListAsync();
        }
        
        public GameClient.Server.PlayerProfile LoginPlayer(string username, string password) {
            return base.Channel.LoginPlayer(username, password);
        }
        
        public System.Threading.Tasks.Task<GameClient.Server.PlayerProfile> LoginPlayerAsync(string username, string password) {
            return base.Channel.LoginPlayerAsync(username, password);
        }
        
        public bool LoginGuest() {
            return base.Channel.LoginGuest();
        }
        
        public System.Threading.Tasks.Task<bool> LoginGuestAsync() {
            return base.Channel.LoginGuestAsync();
        }
        
        public void LogoutPlayer(System.Guid playerId) {
            base.Channel.LogoutPlayer(playerId);
        }
        
        public System.Threading.Tasks.Task LogoutPlayerAsync(System.Guid playerId) {
            return base.Channel.LogoutPlayerAsync(playerId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IGameService")]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/JoinGame", ReplyAction="http://tempuri.org/IGameService/JoinGameResponse")]
        GameClient.Server.TicTacToeState JoinGame(GameClient.Server.GameType type, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/JoinGame", ReplyAction="http://tempuri.org/IGameService/JoinGameResponse")]
        System.Threading.Tasks.Task<GameClient.Server.TicTacToeState> JoinGameAsync(GameClient.Server.GameType type, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Quit", ReplyAction="http://tempuri.org/IGameService/QuitResponse")]
        void Quit(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Quit", ReplyAction="http://tempuri.org/IGameService/QuitResponse")]
        System.Threading.Tasks.Task QuitAsync(System.Guid gameId, System.Guid playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/PlayerMove", ReplyAction="http://tempuri.org/IGameService/PlayerMoveResponse")]
        GameClient.Server.TicTacToeState PlayerMove(System.Guid gameId, System.Guid playerId, GameClient.Server.TicTacToeMove move);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/PlayerMove", ReplyAction="http://tempuri.org/IGameService/PlayerMoveResponse")]
        System.Threading.Tasks.Task<GameClient.Server.TicTacToeState> PlayerMoveAsync(System.Guid gameId, System.Guid playerId, GameClient.Server.TicTacToeMove move);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : GameClient.Server.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.ClientBase<GameClient.Server.IGameService>, GameClient.Server.IGameService {
        
        public GameServiceClient() {
        }
        
        public GameServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GameClient.Server.TicTacToeState JoinGame(GameClient.Server.GameType type, System.Guid playerId) {
            return base.Channel.JoinGame(type, playerId);
        }
        
        public System.Threading.Tasks.Task<GameClient.Server.TicTacToeState> JoinGameAsync(GameClient.Server.GameType type, System.Guid playerId) {
            return base.Channel.JoinGameAsync(type, playerId);
        }
        
        public void Quit(System.Guid gameId, System.Guid playerId) {
            base.Channel.Quit(gameId, playerId);
        }
        
        public System.Threading.Tasks.Task QuitAsync(System.Guid gameId, System.Guid playerId) {
            return base.Channel.QuitAsync(gameId, playerId);
        }
        
        public GameClient.Server.TicTacToeState PlayerMove(System.Guid gameId, System.Guid playerId, GameClient.Server.TicTacToeMove move) {
            return base.Channel.PlayerMove(gameId, playerId, move);
        }
        
        public System.Threading.Tasks.Task<GameClient.Server.TicTacToeState> PlayerMoveAsync(System.Guid gameId, System.Guid playerId, GameClient.Server.TicTacToeMove move) {
            return base.Channel.PlayerMoveAsync(gameId, playerId, move);
        }
    }
}
